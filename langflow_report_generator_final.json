{
  "description": "Report Generator Flow",
  "name": "Report Generator",
  "id": "flow_report_generator",
  "data": {
    "nodes": [
      {
        "id": "python_code",
        "type": "CustomComponent",
        "position": {
          "x": 100,
          "y": 100
        },
        "data": {
          "node": {
            "template": {
              "code": {
                "type": "code",
                "required": true,
                "show": true,
                "name": "code",
                "value": "import pandas as pd\nfrom docx import Document\nimport os\nfrom pathlib import Path\nfrom datetime import datetime\n\ndef process_reports(excel_file, template_file):\n    # Setup directories\n    input_dir = Path(os.path.abspath(\"Inputs\"))\n    output_dir = Path(os.path.abspath(\"Outputs\"))\n    output_dir.mkdir(exist_ok=True)\n    \n    # Load Excel data\n    file_path = input_dir / excel_file\n    if not file_path.exists():\n        return f\"Excel file not found at {file_path}\"\n    \n    df = pd.read_excel(file_path)\n    df.columns = [col.strip('{}') for col in df.columns]\n    if 'processed' not in df.columns:\n        df['processed'] = ''\n    df['processed'] = df['processed'].astype(str)\n    \n    # Process reports\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    processed_count = 0\n    \n    for index, row in df.iterrows():\n        if pd.notna(row['processed']) and row['processed'] != '':\n            continue\n        \n        # Load template\n        template_path = input_dir / template_file\n        if not template_path.exists():\n            return f\"Template file not found at {template_path}\"\n        \n        document = Document(template_path)\n        \n        # Replace fields\n        for paragraph in document.paragraphs:\n            for key, value in row.items():\n                str_value = str(value) if pd.notna(value) else \"\"\n                placeholder = f\"{{{key}}}\"\n                if placeholder in paragraph.text:\n                    paragraph.text = paragraph.text.replace(placeholder, str_value)\n        \n        for table in document.tables:\n            for trow in table.rows:\n                for cell in trow.cells:\n                    for key, value in row.items():\n                        str_value = str(value) if pd.notna(value) else \"\"\n                        placeholder = f\"{{{key}}}\"\n                        if placeholder in cell.text:\n                            cell.text = cell.text.replace(placeholder, str_value)\n        \n        # Save report\n        output_filename = f\"report_{timestamp}_{index + 1}.docx\"\n        output_path = output_dir / output_filename\n        document.save(output_path)\n        processed_count += 1\n        \n        # Update processed column\n        try:\n            df.loc[index, 'processed'] = output_filename\n        except Exception:\n            pass\n\n    # Save Excel file\n    try:\n        df.to_excel(file_path, index=False)\n    except Exception:\n        pass\n\n    return f\"Processed {processed_count} new reports. Total rows in Excel: {len(df)}.\""
              },
              "function": {
                "type": "str",
                "required": true,
                "show": false,
                "multiline": false,
                "value": "process_reports"
              }
            },
            "description": "Custom Python function to generate reports from Excel data and Word templates",
            "base_classes": ["function"],
            "display_name": "Report Generator"
          }
        }
      },
      {
        "id": "excel_input",
        "type": "InputNode",
        "position": {
          "x": 100,
          "y": 300
        },
        "data": {
          "node": {
            "template": {
              "value": {
                "type": "str",
                "required": true,
                "show": true,
                "multiline": false,
                "value": "test.xlsx"
              }
            },
            "description": "Excel file input",
            "base_classes": ["str"],
            "display_name": "Excel File"
          }
        }
      },
      {
        "id": "template_input",
        "type": "InputNode",
        "position": {
          "x": 300,
          "y": 300
        },
        "data": {
          "node": {
            "template": {
              "value": {
                "type": "str",
                "required": true,
                "show": true,
                "multiline": false,
                "value": "template1.docx"
              }
            },
            "description": "Word template file input",
            "base_classes": ["str"],
            "display_name": "Template File"
          }
        }
      },
      {
        "id": "output_node",
        "type": "OutputNode",
        "position": {
          "x": 500,
          "y": 200
        },
        "data": {
          "node": {
            "template": {},
            "description": "Output of the report generation process",
            "base_classes": ["str"],
            "display_name": "Result"
          }
        }
      }
    ],
    "edges": [
      {
        "source": "excel_input",
        "sourceHandle": "value",
        "target": "python_code",
        "targetHandle": "excel_file",
        "id": "edge1"
      },
      {
        "source": "template_input",
        "sourceHandle": "value",
        "target": "python_code",
        "targetHandle": "template_file",
        "id": "edge2"
      },
      {
        "source": "python_code",
        "sourceHandle": "output",
        "target": "output_node",
        "targetHandle": "input",
        "id": "edge3"
      }
    ]
  }
}
