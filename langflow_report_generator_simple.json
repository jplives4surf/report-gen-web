{
  "description": "Report Generator Flow",
  "name": "Report Generator",
  "data": {
    "nodes": [
      {
        "id": "1",
        "data": {
          "code": "import pandas as pd\nfrom docx import Document\nimport os\nfrom pathlib import Path\nfrom datetime import datetime\n\ndef load_excel_data(excel_file):\n    input_dir = Path(os.path.abspath(\"Inputs\"))\n    file_path = input_dir / excel_file\n    if not file_path.exists():\n        raise FileNotFoundError(f\"Excel file not found at {file_path}\")\n    \n    df = pd.read_excel(file_path)\n    df.columns = [col.strip('{}') for col in df.columns]\n    if 'processed' not in df.columns:\n        df['processed'] = ''\n    df['processed'] = df['processed'].astype(str)\n    return df\n\ndef load_template(template_file):\n    input_dir = Path(os.path.abspath(\"Inputs\"))\n    template_path = input_dir / template_file\n    if not template_path.exists():\n        raise FileNotFoundError(f\"Template file not found at {template_path}\")\n    \n    return Document(template_path)\n\ndef replace_fields(document, data_row):\n    for paragraph in document.paragraphs:\n        for key, value in data_row.items():\n            str_value = str(value) if pd.notna(value) else \"\"\n            placeholder = f\"{{{key}}}\"\n            if placeholder in paragraph.text:\n                paragraph.text = paragraph.text.replace(placeholder, str_value)\n    \n    for table in document.tables:\n        for row in table.rows:\n            for cell in row.cells:\n                for key, value in data_row.items():\n                    str_value = str(value) if pd.notna(value) else \"\"\n                    placeholder = f\"{{{key}}}\"\n                    if placeholder in cell.text:\n                        cell.text = cell.text.replace(placeholder, str_value)\n    \n    return document\n\ndef generate_reports(df, excel_file, template_file):\n    input_dir = Path(os.path.abspath(\"Inputs\"))\n    output_dir = Path(os.path.abspath(\"Outputs\"))\n    output_dir.mkdir(exist_ok=True)\n    \n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    processed_count = 0\n    \n    for index, row in df.iterrows():\n        if pd.notna(row['processed']) and row['processed'] != '':\n            print(f\"Skipping row {index + 1} because 'processed' column is not empty ('{row['processed']}').\")\n            continue\n        \n        current_template_doc = load_template(template_file)\n        report_doc = replace_fields(current_template_doc, row)\n        output_filename = f\"report_{timestamp}_{index + 1}.docx\"\n        output_path = output_dir / output_filename\n        \n        report_doc.save(output_path)\n        print(f\"Generated report file: {output_path}\")\n        processed_count += 1\n        \n        try:\n            df.loc[index, 'processed'] = output_filename\n        except Exception as e:\n            print(f\"Error updating DataFrame in memory for row {index + 1}: {e}\")\n\n    try:\n        df.to_excel(input_dir / excel_file, index=False)\n        print(f\"Successfully attempted to save updates to {excel_file}\")\n    except PermissionError:\n        print(f\"\\n[ERROR] Permission denied: Could not save updates to {excel_file}. Please ensure the file is closed and not open in another program, then run the script again.\")\n    except Exception as e:\n        print(f\"\\n[ERROR] Failed to save updates to {excel_file}: {e}\")\n\n    return f\"Processed {processed_count} new reports. Total rows in Excel: {len(df)}.\"\n\n# Main function to process reports\ndef process_reports(excel_file, template_file):\n    df = load_excel_data(excel_file)\n    result = generate_reports(df, excel_file, template_file)\n    return result",
          "name": "Report Generator Code",
          "type": "python"
        },
        "position": {
          "x": 200,
          "y": 200
        },
        "type": "PythonFunction",
        "width": 400,
        "height": 152
      },
      {
        "id": "2",
        "data": {
          "name": "Excel File Input",
          "type": "str",
          "value": "test.xlsx"
        },
        "position": {
          "x": 200,
          "y": 400
        },
        "type": "InputText",
        "width": 150,
        "height": 98
      },
      {
        "id": "3",
        "data": {
          "name": "Template File Input",
          "type": "str",
          "value": "template1.docx"
        },
        "position": {
          "x": 400,
          "y": 400
        },
        "type": "InputText",
        "width": 150,
        "height": 98
      },
      {
        "id": "4",
        "data": {
          "code": "def run_report_generator(process_reports_func, excel_file, template_file):\n    result = process_reports_func(excel_file, template_file)\n    return result",
          "name": "Run Report Generator",
          "type": "python"
        },
        "position": {
          "x": 300,
          "y": 600
        },
        "type": "PythonFunction",
        "width": 400,
        "height": 152
      }
    ],
    "edges": [
      {
        "source": "1",
        "sourceHandle": "process_reports",
        "target": "4",
        "targetHandle": "process_reports_func",
        "type": "default",
        "id": "e1-4"
      },
      {
        "source": "2",
        "sourceHandle": "value",
        "target": "4",
        "targetHandle": "excel_file",
        "type": "default",
        "id": "e2-4"
      },
      {
        "source": "3",
        "sourceHandle": "value",
        "target": "4",
        "targetHandle": "template_file",
        "type": "default",
        "id": "e3-4"
      }
    ]
  }
}
